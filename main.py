# -*- coding: utf-8 -*-
from flask import Flask, request, Response
import random, json, os, time, datetime

app = Flask(__name__)

# ---------------- CONFIG ----------------
DATA_FILE = "balances.json"
STATS_FILE = "stats.json"
BONUS_FILE = "bonuses.json"
WATCH_FILE = "watchtime.json"

START_BALANCE = 1000
DAILY_BONUS = 500
WATCH_REWARD = 500
WATCH_INTERVAL = 15 * 60  # 15 minutes

# –ê–¥–º–∏–Ω—ã (–Ω–∏–∫–Ω–µ–π–º—ã Twitch) ‚Äî –≤–ø–∏—à–∏ —Å–≤–æ–∏ –Ω–∏–∫–∏ —Å—é–¥–∞
ADMINS = ["Gxku999", "*"]

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
COLOR_EMOJI = {
    "red": "üü•",
    "black": "‚¨õ",
    "green": "üü©"
}
# ----------------------------------------

def load_json(path):
    if not os.path.exists(path):
        return {}
    with open(path, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

balances = load_json(DATA_FILE)
stats = load_json(STATS_FILE)
bonuses = load_json(BONUS_FILE)
watchtime = load_json(WATCH_FILE)

def text_response(msg: str):
    return Response(msg, content_type="text/plain; charset=utf-8")

def ensure_user(user: str):
    if user not in balances:
        balances[user] = START_BALANCE
    if user not in stats:
        stats[user] = {"wins": 0, "losses": 0}
    # no autosave here; caller decides when to save

def get_balance(user: str):
    ensure_user(user)
    return balances[user]

def reward_watchtime(user: str):
    """–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ >= WATCH_INTERVAL —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å WATCH_REWARD"""
    now = time.time()
    last = watchtime.get(user, 0)
    if now - last >= WATCH_INTERVAL:
        ensure_user(user)
        balances[user] = get_balance(user) + WATCH_REWARD
        watchtime[user] = now
        save_json(DATA_FILE, balances)
        save_json(WATCH_FILE, watchtime)
        return f"‚è± {user} –ø–æ–ª—É—á–∞–µ—Ç {WATCH_REWARD} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∏–º–µ! üéÅ –ë–∞–ª–∞–Ω—Å: {balances[user]}"
    return None

@app.route("/roll")
def roll():
    user = (request.args.get("user") or "").strip()
    color = (request.args.get("color") or "").lower().strip()
    bet_raw = request.args.get("bet") or ""

    # Basic validation
    if not user or not color or not bet_raw:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !roll [red|black|green] [—Å—Ç–∞–≤–∫–∞]")

    # Protect against 'null' / 'None' strings commonly from template engines
    if bet_raw.lower() in ("null", "none", ""):
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–∏–º–µ—Ä: !roll red 100")

    try:
        bet = int(bet_raw)
    except ValueError:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º! –ü—Ä–∏–º–µ—Ä: !roll red 100")

    if color not in COLOR_EMOJI:
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green!")

    ensure_user(user)
    balance = get_balance(user)
    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
    if bet > balance:
        return text_response(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance}")

    # –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ >=15 –º–∏–Ω—É—Ç)
    reward_msg = reward_watchtime(user)

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    balances[user] = balance - bet

    # –†—É–ª–µ—Ç–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –≤–µ—Å–∞–º–∏ (–ø—Ä–∏–º–µ—Ä)
    result = random.choices(["red", "black", "green"], weights=[48, 48, 4])[0]
    multiplier = 14 if result == "green" else 2

    if result == color:
        # –≤—ã–∏–≥—Ä—ã—à: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É + –≤—ã–∏–≥—Ä—ã—à (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ multiplier)
        win_total = bet * multiplier
        balances[user] += win_total
        stats.setdefault(user, {"wins": 0, "losses": 0})
        stats[user]["wins"] += 1
        delta = win_total - bet  # —á–∏—Å—Ç—ã–π –≤—ã–∏–≥—Ä—ã—à
        left_bal = balances[user]
        msg = f"{COLOR_EMOJI[color]} {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {COLOR_EMOJI[color]}! –í—ã–ø–∞–ª–æ {COLOR_EMOJI[result]} ‚Äî ü§ë –ü–æ–±–µ–¥–∞! +{delta} | –ë–∞–ª–∞–Ω—Å: {left_bal}"
    else:
        stats.setdefault(user, {"wins": 0, "losses": 0})
        stats[user]["losses"] += 1
        left_bal = balances[user]
        msg = f"{COLOR_EMOJI[color]} {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {COLOR_EMOJI[color]}! –í—ã–ø–∞–ª–æ {COLOR_EMOJI[result]} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {left_bal}"

    save_json(DATA_FILE, balances)
    save_json(STATS_FILE, stats)

    if reward_msg:
        msg = msg + "\n" + reward_msg

    return text_response(msg)

@app.route("/balance")
def balance():
    user = (request.args.get("user") or "").strip()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü—Ä–∏–º–µ—Ä: /balance?user=Nickname")
    reward_msg = reward_watchtime(user)
    ensure_user(user)
    bal = balances[user]
    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {bal} –º–æ–Ω–µ—Ç"
    if reward_msg:
        msg = msg + "\n" + reward_msg
    return text_response(msg)

@app.route("/bonus")
def bonus():
    user = (request.args.get("user") or "").strip()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü—Ä–∏–º–µ—Ä: /bonus?user=Nickname")

    today = datetime.date.today().isoformat()
    last = bonuses.get(user)
    if last == today:
        return text_response("üéÅ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞.")
    ensure_user(user)
    balances[user] = get_balance(user) + DAILY_BONUS
    bonuses[user] = today
    save_json(BONUS_FILE, bonuses)
    save_json(DATA_FILE, balances)
    return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {DAILY_BONUS} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balances[user]}")

@app.route("/top")
def top():
    if not balances:
        return text_response("üò¥ –ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª!")
    top_players = sorted(balances.items(), key=lambda x: x[1], reverse=True)[:5]
    lines = [f"üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:"]
    for i, (name, bal) in enumerate(top_players, start=1):
        lines.append(f"{i}. {name} ‚Äî {bal}")
    return text_response("\n".join(lines))

@app.route("/stats")
def stats_route():
    user = (request.args.get("user") or "").strip()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü—Ä–∏–º–µ—Ä: /stats?user=Nickname")
    reward_msg = reward_watchtime(user)
    s = stats.get(user, {"wins": 0, "losses": 0})
    total = s["wins"] + s["losses"]
    winrate = (s["wins"] / total * 100) if total > 0 else 0.0
    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user}: –ü–æ–±–µ–¥ ‚Äî {s['wins']}, –ü–æ—Ä–∞–∂–µ–Ω–∏–π ‚Äî {s['losses']} (WinRate: {winrate:.1f}%)"
    if reward_msg:
        msg = msg + "\n" + reward_msg
    return text_response(msg)

@app.route("/admin")
def admin():
    """
    –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ (—á–µ—Ä–µ–∑ StreamElements admin –∫–æ–º–∞–Ω–¥—É):
    /admin?user=AdminNick&target=TargetNick&amount=1000
    –¢–æ–ª—å–∫–æ –Ω–∏–∫–∏ –∏–∑ ADMINS –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç.
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¢–û–õ–¨–ö–û –î–û–ë–ê–í–õ–Ø–ï–¢ (–Ω–∞–∫—Ä—É—á–∏–≤–∞–µ—Ç) –±–∞–ª–∞–Ω—Å.
    """
    user = (request.args.get("user") or "").strip()     # –∫—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ ADMINS)
    target = (request.args.get("target") or "").strip() # –∫–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º
    amount_raw = request.args.get("amount") or ""

    if not user or not target or not amount_raw:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin?user=YourAdminNick&target=Nick&amount=1000")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if user not in ADMINS:
        return text_response("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    try:
        amount = int(amount_raw)
    except ValueError:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")

    if amount <= 0:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")

    ensure_user(target)
    balances[target] = get_balance(target) + amount
    save_json(DATA_FILE, balances)

    return text_response(f"‚úÖ –ê–¥–º–∏–Ω {user} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balances[target]}")

@app.route("/")
def home():
    return text_response("üé∞ Casino API —Ä–∞–±–æ—Ç–∞–µ—Ç!")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
