from flask import Flask, request, Response
import random
import json
import time
import os

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BALANCES_FILE = "balances.json"
ADMINS = ["Gxku999"]  # <-- —Ç–≤–æ–π Twitch –Ω–∏–∫
BONUS_AMOUNT = 500
BONUS_INTERVAL = 60 * 60 * 24  # 24 —á–∞—Å–∞
ACTIVE_REWARD = 500
ACTIVE_INTERVAL = 60 * 15  # 15 –º–∏–Ω—É—Ç

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if os.path.exists(BALANCES_FILE):
    with open(BALANCES_FILE, "r", encoding="utf-8") as f:
        balances = json.load(f)
else:
    balances = {}

# === –£—Ç–∏–ª–∏—Ç—ã ===
def save_data():
    with open(BALANCES_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

def text_response(msg: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ JSON"""
    return Response(msg, mimetype="text/plain; charset=utf-8")

def get_user(user):
    if user not in balances:
        balances[user] = {
            "balance": 1000,
            "wins": 0,
            "losses": 0,
            "last_bonus": 0,
            "last_active": 0
        }
    return balances[user]

def color_icon(color):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫—Ä—É–≥–∞ –ø–æ —Ü–≤–µ—Ç—É"""
    icons = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}
    return icons.get(color, "‚ùì")

# === –†—É–ª–µ—Ç–∫–∞ ===
@app.route("/roulette")
def roulette():
    user = request.args.get("user")
    color = request.args.get("color")
    bet = request.args.get("bet")

    if not user or not color or not bet:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !roll <red/black/green> <—Å—Ç–∞–≤–∫–∞>")

    color = color.lower()
    if color not in ["red", "black", "green"]:
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green!")

    try:
        bet = int(bet)
    except ValueError:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    data = get_user(user)
    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")

    if data["balance"] < bet:
        return text_response("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")

    result = random.choices(["red", "black", "green"], weights=[47, 47, 6])[0]
    multiplier = 14 if result == "green" else 2
    win = bet * multiplier if color == result else 0

    color_icon_bet = color_icon(color)
    color_icon_result = color_icon(result)

    if win > 0:
        data["balance"] += win - bet
        data["wins"] += 1
        msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon_bet}! –í—ã–ø–∞–ª–æ {color_icon_result} ‚Äî ‚úÖ –ü–æ–±–µ–¥–∞! | +{win - bet} | –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    else:
        data["balance"] -= bet
        data["losses"] += 1
        msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon_bet}! –í—ã–ø–∞–ª–æ {color_icon_result} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {data['balance']}"

    save_data()
    return text_response(msg)

# === –ë–∞–ª–∞–Ω—Å (–∏ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å) ===
@app.route("/balance")
def balance():
    user = request.args.get("user")
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    data = get_user(user)
    now = time.time()
    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {data['balance']} –º–æ–Ω–µ—Ç"

    if now - data["last_active"] >= ACTIVE_INTERVAL:
        data["balance"] += ACTIVE_REWARD
        data["last_active"] = now
        msg += f"\n‚è± {user} –ø–æ–ª—É—á–∞–µ—Ç {ACTIVE_REWARD} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∏–º–µ! üéÅ"

    save_data()
    return text_response(msg)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ===
@app.route("/bonus")
def bonus():
    user = request.args.get("user")
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    data = get_user(user)
    now = time.time()
    if now - data["last_bonus"] < BONUS_INTERVAL:
        remaining = int((BONUS_INTERVAL - (now - data["last_bonus"])) / 3600)
        return text_response(f"‚è≥ {user}, –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {remaining} —á.")
    data["balance"] += BONUS_AMOUNT
    data["last_bonus"] = now
    save_data()
    return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {BONUS_AMOUNT} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {data['balance']}")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@app.route("/stats")
def stats():
    user = request.args.get("user")
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    data = get_user(user)
    return text_response(f"üìä {user}: –ü–æ–±–µ–¥—ã ‚Äî {data['wins']} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è ‚Äî {data['losses']}")

# === –¢–æ–ø-10 ===
@app.route("/top")
def top():
    top10 = sorted(balances.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (u, d) in enumerate(top10, start=1):
        msg += f"{i}. {u} ‚Äî {d['balance']} –º–æ–Ω–µ—Ç\n"
    return text_response(msg.strip())

# === –ê–¥–º–∏–Ω ===
@app.route("/admin")
def admin():
    user = request.args.get("user")
    target = request.args.get("target")
    action = request.args.get("action")
    amount = request.args.get("amount")

    if user not in ADMINS:
        return text_response("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not all([target, action, amount]):
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !admin <–Ω–∏–∫> <add/remove> <—Å—É–º–º–∞>")

    try:
        amount = int(amount)
    except ValueError:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    data = get_user(target)

    if action == "add":
        data["balance"] += amount
        msg = f"‚úÖ –ê–¥–º–∏–Ω {user} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target}. –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    elif action == "remove":
        data["balance"] = max(0, data["balance"] - amount)
        msg = f"‚ö†Ô∏è –ê–¥–º–∏–Ω {user} –∑–∞–±—Ä–∞–ª {amount} –º–æ–Ω–µ—Ç —É {target}. –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    else:
        return text_response("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π add/remove")

    save_data()
    return text_response(msg)

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.route("/")
def home():
    return text_response("‚úÖ Twitch Casino Bot –∞–∫—Ç–∏–≤–µ–Ω!")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
