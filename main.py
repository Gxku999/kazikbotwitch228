from flask import Flask, request, jsonify
import json, random, time, os

app = Flask(__name__)

DATA_FILE = "balances.json"
STATS_FILE = "stats.json"
WATCHTIME_FILE = "watchtime.json"
BONUS_FILE = "bonuses.json"

START_BALANCE = 1000
WATCH_REWARD = 500
WATCH_INTERVAL = 15 * 60  # 15 –º–∏–Ω—É—Ç
DAILY_BONUS = 500

ADMINS = ["gxku999"]  # —Ç–≤–æ–π –Ω–∏–∫ –∞–¥–º–∏–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===============

def load_json(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except:
            return {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def norm(user: str):
    return (user or "").strip().lower()

balances = load_json(DATA_FILE)
stats = load_json(STATS_FILE)
watchtime = load_json(WATCHTIME_FILE)
bonuses = load_json(BONUS_FILE)

def ensure_user(user: str):
    u = norm(user)
    if u == "":
        return u
    if u not in balances:
        balances[u] = START_BALANCE
    if u not in stats:
        stats[u] = {"wins": 0, "losses": 0}
    save_json(DATA_FILE, balances)
    save_json(STATS_FILE, stats)
    return u

def get_balance(user: str):
    u = norm(user)
    if u not in balances:
        balances[u] = START_BALANCE
        save_json(DATA_FILE, balances)
    return balances[u]

def set_balance(user: str, amount: int):
    u = ensure_user(user)
    balances[u] = max(0, int(amount))
    save_json(DATA_FILE, balances)
    return balances[u]

def add_balance(user: str, amount: int):
    u = ensure_user(user)
    balances[u] = balances.get(u, START_BALANCE) + int(amount)
    save_json(DATA_FILE, balances)
    return balances[u]

def reward_watchtime(user: str):
    """–í—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç"""
    u = ensure_user(user)
    now = time.time()
    last_time = watchtime.get(u, 0)
    if now - last_time >= WATCH_INTERVAL:
        watchtime[u] = now
        save_json(WATCHTIME_FILE, watchtime)
        add_balance(u, WATCH_REWARD)
        return f"‚è± {user} –ø–æ–ª—É—á–∞–µ—Ç {WATCH_REWARD} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∏–º–µ! üéÅ"
    return ""

def reward_on_command(user_raw):
    """–ê–≤—Ç–æ–Ω–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏ –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    reward_msg = reward_watchtime(user_raw)
    return reward_msg

def text_response(msg):
    return jsonify({"message": msg})

# =============== –†–£–õ–ï–¢–ö–ê üé∞ ===============

@app.route("/roulette")
def roulette():
    user_raw = request.args.get("user") or ""
    reward_msg = reward_on_command(user_raw)

    color = (request.args.get("color") or "").lower()
    bet_raw = request.args.get("bet") or ""
    user = ensure_user(user_raw)

    try:
        bet = int(bet_raw)
    except:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
    if bet > get_balance(user):
        return text_response("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")

    result = random.choices(["red", "black", "green"], weights=[48, 48, 4])[0]

    color_emoji = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}
    result_emoji = color_emoji.get(result, result)
    color_emoji_str = color_emoji.get(color, color)

    if result == color:
        multiplier = 14 if result == "green" else 2
        win = bet * multiplier
        add_balance(user, win - bet)
        stats[user]["wins"] += 1
        save_json(STATS_FILE, stats)
        msg = f"üé∞ {user_raw} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_emoji_str}! –í—ã–ø–∞–ª–æ {result_emoji} ‚Äî ü§ë –ü–æ–±–µ–¥–∞! +{win - bet} –º–æ–Ω–µ—Ç | –ë–∞–ª–∞–Ω—Å: {get_balance(user)}"
    else:
        add_balance(user, -bet)
        stats[user]["losses"] += 1
        save_json(STATS_FILE, stats)
        msg = f"üé∞ {user_raw} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_emoji_str}! –í—ã–ø–∞–ª–æ {result_emoji} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {get_balance(user)}"

    if reward_msg:
        msg += f"\n{reward_msg}"

    return text_response(msg)

# =============== –ë–ê–õ–ê–ù–° üí∞ ===============

@app.route("/balance")
def balance():
    user_raw = request.args.get("user") or ""
    reward_msg = reward_on_command(user_raw)
    user = ensure_user(user_raw)
    bal = get_balance(user)
    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å {user_raw}: {bal} –º–æ–Ω–µ—Ç"
    if reward_msg:
        msg += f"\n{reward_msg}"
    return text_response(msg)

# =============== –ë–û–ù–£–° üéÅ ===============

@app.route("/bonus")
def bonus():
    user_raw = request.args.get("user") or ""
    reward_msg = reward_on_command(user_raw)
    user = ensure_user(user_raw)
    now = time.time()
    last_bonus = bonuses.get(user, 0)
    if now - last_bonus >= 24 * 3600:
        bonuses[user] = now
        save_json(BONUS_FILE, bonuses)
        add_balance(user, DAILY_BONUS)
        msg = f"üéÅ {user_raw} –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {DAILY_BONUS} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {get_balance(user)}"
    else:
        hours = int((24 * 3600 - (now - last_bonus)) / 3600)
        msg = f"‚è≥ {user_raw}, –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á."
    if reward_msg:
        msg += f"\n{reward_msg}"
    return text_response(msg)

# =============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê üìä ===============

@app.route("/stats")
def stats_route():
    user_raw = request.args.get("user") or ""
    reward_msg = reward_on_command(user_raw)
    user = ensure_user(user_raw)
    s = stats.get(user, {"wins": 0, "losses": 0})
    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_raw}: –ü–æ–±–µ–¥—ã ‚Äî {s['wins']}, –ü–æ—Ä–∞–∂–µ–Ω–∏—è ‚Äî {s['losses']}"
    if reward_msg:
        msg += f"\n{reward_msg}"
    return text_response(msg)

# =============== –¢–û–ü 10 üíé ===============

@app.route("/top")
def top():
    user_raw = request.args.get("user") or ""
    reward_msg = reward_on_command(user_raw)

    if not balances:
        return text_response("üìâ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")
    sorted_players = sorted(balances.items(), key=lambda x: x[1], reverse=True)
    top10 = sorted_players[:10]
    lines = []
    for i, (name, bal) in enumerate(top10, start=1):
        lines.append(f"{i}. {name} ‚Äî {bal}")
    msg = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines)
    if reward_msg:
        msg += f"\n{reward_msg}"
    return text_response(msg)

# =============== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ üëë ===============

@app.route("/admin")
def admin():
    user_raw = request.args.get("user") or ""
    reward_msg = reward_on_command(user_raw)

    target_raw = request.args.get("target") or ""
    action = (request.args.get("action") or "add").lower()
    amount_raw = request.args.get("amount") or ""

    user = norm(user_raw)
    target = norm(target_raw)

    if not user or not target or not amount_raw:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin?user=AdminNick&target=Nick&action=add|remove&amount=1000")

    if user not in [a.lower() for a in ADMINS]:
        return text_response("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    try:
        amount = int(amount_raw)
    except ValueError:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    ensure_user(target)

    if action == "add":
        new_balance = add_balance(target, amount)
        msg = f"‚úÖ {user_raw} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target_raw}. –ë–∞–ª–∞–Ω—Å: {new_balance}"
    elif action == "remove":
        new_balance = add_balance(target, -amount)
        msg = f"‚úÖ {user_raw} –æ—Ç–Ω—è–ª {amount} –º–æ–Ω–µ—Ç —É {target_raw}. –ë–∞–ª–∞–Ω—Å: {new_balance}"
    else:
        return text_response("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å add –∏–ª–∏ remove")

    if reward_msg:
        msg += f"\n{reward_msg}"
    return text_response(msg)

# =============== –ì–õ–ê–í–ù–ê–Ø ===============

@app.route("/")
def home():
    return "üé∞ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ==========================================================

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
