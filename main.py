import json
import random
import time
import os
import subprocess
from flask import Flask, request, Response

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LOCAL_FILE = "balances.json"
DEFAULT_BALANCE = 1500
BONUS_AMOUNT = 500
BONUS_INTERVAL = 15 * 60  # 15 –º–∏–Ω—É—Ç

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO")  # –ø—Ä–∏–º–µ—Ä: gxku999/kazikbot
GITHUB_USER = os.getenv("GITHUB_USER")

LAST_PUSH = 0
PUSH_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

def save_balances():
    global LAST_PUSH
    try:
        with open(LOCAL_FILE, "w", encoding="utf-8") as f:
            json.dump(balances, f, ensure_ascii=False, indent=2)
        log(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {LOCAL_FILE}")

        now = time.time()
        if now - LAST_PUSH >= PUSH_INTERVAL:
            subprocess.run(["git", "add", LOCAL_FILE])
            subprocess.run(["git", "commit", "-m", "update balances.json"], check=False)
            subprocess.run([
                "git", "push",
                f"https://{os.getenv('GITHUB_USER')}:{os.getenv('GITHUB_TOKEN')}@github.com/{os.getenv('GITHUB_REPO')}.git",
                "HEAD:main"
            ], check=False)
            LAST_PUSH = now
            log("‚úÖ balances.json —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub.")
        else:
            log("‚è≥ –ü—Ä–æ–ø—É—Å–∫ –ø—É—à–∞ (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ).")

    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")



# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def log(msg):
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {msg}", flush=True)

def text_response(message):
    return Response(message, content_type="text/plain; charset=utf-8")

def load_balances():
    if os.path.exists(LOCAL_FILE):
        try:
            with open(LOCAL_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            log(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {LOCAL_FILE}: {e}")
    return {}

def save_balances():
    try:
        with open(LOCAL_FILE, "w", encoding="utf-8") as f:
            json.dump(balances, f, ensure_ascii=False, indent=2)
        log(f"üíæ balances.json —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ.")
        push_to_github()
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

def push_to_github():
    if not (GITHUB_TOKEN and GITHUB_REPO and GITHUB_USER):
        log("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö GitHub, –ø—Ä–æ–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
        return
    try:
        repo_url = f"https://{GITHUB_USER}:{GITHUB_TOKEN}@github.com/{GITHUB_REPO}.git"
        subprocess.run(["git", "config", "--global", "user.email", "bot@render.local"])
        subprocess.run(["git", "config", "--global", "user.name", "Render Bot"])
        subprocess.run(["git", "add", LOCAL_FILE])
        subprocess.run(["git", "commit", "-m", f"update balances.json {time.strftime('%H:%M:%S')}"], check=False)
        subprocess.run(["git", "push", repo_url, "HEAD:main"], check=False)
        log("‚úÖ balances.json —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub.")
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ GitHub: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ ===
balances = load_balances()
log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –±–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω.")

# === –õ–æ–≥–∏–∫–∞ ===
def ensure_user(user):
    user = user.lower()
    if user not in balances:
        balances[user] = {"balance": DEFAULT_BALANCE, "last_bonus": 0}
        save_balances()
    return user

@app.route("/")
def home():
    return text_response("‚úÖ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@app.route("/balance")
def balance():
    user = request.args.get("user", "").strip().lower()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (?user=...)")
    u = ensure_user(user)
    bal = balances[u]["balance"]
    return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {bal} –º–æ–Ω–µ—Ç")

@app.route("/roll")
def roll():
    user = request.args.get("user", "").strip().lower()
    color = request.args.get("color", "").strip().lower()
    bet_str = request.args.get("bet", "").strip()
    if not user or not color or not bet_str:
        return text_response("‚ùå –§–æ—Ä–º–∞—Ç: /roll?user=–Ω–∏–∫&color=red|black|green&bet=100")

    try:
        bet = int(bet_str)
    except:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    if bet <= 0:
        return text_response("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞")

    u = ensure_user(user)
    bal = balances[u]["balance"]
    if bal < bet:
        return text_response(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {bal}")

    outcome = random.choices(["red", "black", "green"], weights=[47, 47, 6])[0]
    emoji = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}[outcome]
    bet_emoji = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}.get(color, "‚ùì")

    if color == outcome:
        win = bet * (14 if color == "green" else 2)
        balances[u]["balance"] += win
        result = f"‚úÖ –ü–æ–±–µ–¥–∞! +{win - bet} –º–æ–Ω–µ—Ç"
    else:
        balances[u]["balance"] -= bet
        result = f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à -{bet} –º–æ–Ω–µ—Ç"

    save_balances()
    return text_response(f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {bet_emoji}! –í—ã–ø–∞–ª–æ {emoji} ‚Äî {result} | –ë–∞–ª–∞–Ω—Å: {balances[u]['balance']}")

@app.route("/bonus")
def bonus():
    user = request.args.get("user", "").strip().lower()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (?user=...)")

    u = ensure_user(user)
    now = time.time()
    last = balances[u].get("last_bonus", 0)

    if now - last >= BONUS_INTERVAL:
        balances[u]["last_bonus"] = now
        balances[u]["balance"] += BONUS_AMOUNT
        save_balances()
        return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç {BONUS_AMOUNT} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balances[u]['balance']}")
    else:
        remain = int(BONUS_INTERVAL - (now - last))
        m, s = divmod(remain, 60)
        return text_response(f"‚è≥ {user}, –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {m}–º {s}—Å")

@app.route("/top")
def top():
    if not balances:
        return text_response("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤")
    sorted_users = sorted(balances.items(), key=lambda x: x[1]["balance"], reverse=True)
    lines = [f"{i+1}. {u} ‚Äî {d['balance']} –º–æ–Ω–µ—Ç" for i, (u, d) in enumerate(sorted_users[:10])]
    return text_response("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)


