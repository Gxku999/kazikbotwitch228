# -*- coding: utf-8 -*-
from flask import Flask, request, Response
import random, json, time, os

app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BALANCES_FILE = "balances.json"
ADMINS = ["gxku999"]  # <-- –≤–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫(–∏) –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
BONUS_AMOUNT = 500
BONUS_INTERVAL = 60 * 60 * 24  # 24 —á–∞—Å–∞
ACTIVE_REWARD = 500
ACTIVE_INTERVAL = 60 * 15  # 15 –º–∏–Ω—É—Ç
START_BALANCE = 1000

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if os.path.exists(BALANCES_FILE):
    with open(BALANCES_FILE, "r", encoding="utf-8") as f:
        try:
            balances = json.load(f)
        except:
            balances = {}
else:
    balances = {}

# === –£—Ç–∏–ª–∏—Ç—ã ===
def save_data():
    with open(BALANCES_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

def text_response(msg: str):
    return Response(msg, mimetype="text/plain; charset=utf-8")

def norm_name(n: str) -> str:
    return (n or "").strip()

def norm_key(n: str) -> str:
    return (n or "").strip().lower()

def get_user_entry(key_name: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç"""
    k = norm_key(key_name)
    if k == "":
        return None
    if k not in balances:
        balances[k] = {
            "display": norm_name(key_name),
            "balance": START_BALANCE,
            "wins": 0,
            "losses": 0,
            "last_bonus": 0,
            "last_active": 0
        }
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ display –ø–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏)
    if not balances[k].get("display"):
        balances[k]["display"] = norm_name(key_name)
    return balances[k]

def ensure_user_by_candidates(*cands):
    """–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π).
       '–ê–¥–µ–∫–≤–∞—Ç–Ω—ã–π' = –Ω–µ color word –∏ –Ω–µ —á–∏—Å—Ç–æ —á–∏—Å–ª–æ –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞."""
    colors = {"red","black","green"}
    for c in cands:
        if not c:
            continue
        s = str(c).strip()
        if s == "":
            continue
        low = s.lower()
        if low in ("null","none"):
            continue
        if low in colors:
            continue
        if s.isdigit():
            continue
        return s
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –ø–µ—Ä–≤—ã–π –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –≤–∏–¥–µ
    for c in cands:
        if c and str(c).strip() and str(c).strip().lower() not in ("null","none"):
            return str(c).strip()
    return ""

def color_icon(color):
    icons = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}
    return icons.get((color or "").lower(), "‚ùì")

def parse_params_for_roll():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç user_display, user_key, color, bet –∏–∑ –ª—é–±—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
    —É—Å—Ç–æ–π—á–∏–≤ –∫: user/null swapping, sender, nick, username –∏ —Ç.–ø.
    """
    # –°–æ–±–µ—Ä—ë–º —Å—ã—Ä—å—ë
    raw_user = request.args.get("user") or request.args.get("sender") or request.args.get("nick") or request.args.get("username") or ""
    raw_color = request.args.get("color") or request.args.get("1") or ""
    raw_bet = request.args.get("bet") or request.args.get("amount") or request.args.get("2") or ""

    # –ò–Ω–æ–≥–¥–∞ StreamElements/—à–∞–±–ª–æ–Ω—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–¥–∞—Ç—å —Ü–≤–µ—Ç –≤ –ø–æ–ª–µ user (–Ω–∞–ø—Ä–∏–º–µ—Ä user=red),
    # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∏–∫ –≤ –ø–æ–ª–µ color. –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫:
    colors = {"red","black","green"}
    candidates = []
    # –°–æ–±–µ—Ä—ë–º –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    for v in [raw_user, raw_color, raw_bet]:
        if v is not None:
            candidates.append(str(v).strip())

    # –ü–æ–ø—ã—Ç–∫–∞ 1: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è ‚Äî raw_user –Ω–µ —Ü–≤–µ—Ç –∏ –Ω–µ —á–∏—Å–ª–æ -> good
    if raw_user and raw_user.strip().lower() not in colors and not raw_user.strip().isdigit() and raw_user.strip().lower() not in ("null","none"):
        user_display = raw_user.strip()
        user_key = norm_key(user_display)
        color = (raw_color or "").strip().lower()
        bet = (raw_bet or "").strip()
        return user_display, user_key, color, bet

    # –ü–æ–ø—ã—Ç–∫–∞ 2: –µ—Å–ª–∏ raw_user –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ü–≤–µ—Ç –∏–ª–∏ —á–∏—Å–ª–æ ‚Äî –Ω–∞–π–¥–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–∏–∫ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö params
    alt_user = ensure_user_by_candidates(raw_color, raw_bet, *candidates)
    if alt_user:
        # —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∏–∑ –ø–æ–ª–µ–π —è–≤–ª—è–µ—Ç—Å—è —Ü–≤–µ—Ç, –∞ –∫–∞–∫–æ–π —Å—Ç–∞–≤–∫–∞
        # –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–≤–Ω—è–µ—Ç—Å—è color word -> color; numeric -> bet
        color = ""
        bet = ""
        # check each original arg
        for v in [raw_user, raw_color, raw_bet]:
            if not v:
                continue
            s = str(v).strip()
            low = s.lower()
            if low in colors and color == "":
                color = low
            elif (s.isdigit() or (s.startswith('-') and s[1:].isdigit())) and bet == "":
                bet = s
        # if still missing, try fill from remaining candidates (best effort)
        if color == "":
            for v in [raw_color, raw_bet, raw_user]:
                if v and str(v).strip().lower() in colors:
                    color = str(v).strip().lower()
                    break
        if bet == "":
            for v in [raw_color, raw_bet, raw_user]:
                if v and str(v).strip().isdigit():
                    bet = str(v).strip()
                    break
        user_display = alt_user
        user_key = norm_key(user_display)
        return user_display, user_key, color, bet

    # –ü–æ–ø—ã—Ç–∫–∞ 3: –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º raw_user –∫–∞–∫ –Ω–∏–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å empty)
    user_display = raw_user.strip()
    user_key = norm_key(user_display)
    color = (raw_color or "").strip().lower()
    bet = (raw_bet or "").strip()
    return user_display, user_key, color, bet

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ===

@app.route("/roulette")
def roulette():
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    user_display, user_key, color, bet_raw = parse_params_for_roll()

    if not user_display:
        return text_response("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: !roll <color> <bet>")

    if not color:
        return text_response("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ü–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: red, black –∏–ª–∏ green")

    if color not in ("red","black","green"):
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green")

    if not bet_raw:
        return text_response("‚ùå –£–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É. –ü—Ä–∏–º–µ—Ä: !roll red 100")

    if bet_raw.lower() in ("null","none",""):
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    try:
        bet = int(bet_raw)
    except ValueError:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")

    # –ü–æ–ª—É—á–∞–µ–º entry –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç)
    entry = get_user_entry(user_display)
    if entry is None:
        return text_response("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")

    if entry["balance"] < bet:
        return text_response(f"üí∏ –£ {entry['display']} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ë–∞–ª–∞–Ω—Å: {entry['balance']}")

    # —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É —Å—Ä–∞–∑—É
    entry["balance"] -= bet

    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.choices(["red","black","green"], weights=[47,47,6])[0]
    multiplier = 14 if result == "green" else 2

    win_amount = bet * multiplier if result == color else 0

    if win_amount > 0:
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–≤–∫–ª—é—á–∞—è –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏)
        entry["balance"] += win_amount
        entry["wins"] = entry.get("wins",0) + 1
        delta = win_amount - bet
        msg = f"üé∞ {entry['display']} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon(color)}! –í—ã–ø–∞–ª–æ {color_icon(result)} ‚Äî ‚úÖ –ü–æ–±–µ–¥–∞! | +{delta} | –ë–∞–ª–∞–Ω—Å: {entry['balance']}"
    else:
        entry["losses"] = entry.get("losses",0) + 1
        msg = f"üé∞ {entry['display']} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon(color)}! –í—ã–ø–∞–ª–æ {color_icon(result)} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {entry['balance']}"

    save_data()
    return text_response(msg)

@app.route("/balance")
def balance():
    # Try multiple possible fields for user
    user_try = request.args.get("user") or request.args.get("sender") or request.args.get("nick") or request.args.get("username") or ""
    user_display = ensure_user_by_candidates(user_try, request.args.get("1"), request.args.get("2")) or user_try
    if not user_display:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    entry = get_user_entry(user_display)
    if entry is None:
        return text_response("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫.")
    now = time.time()
    reward_msg = ""
    if now - entry.get("last_active",0) >= ACTIVE_INTERVAL:
        entry["balance"] += ACTIVE_REWARD
        entry["last_active"] = now
        reward_msg = f"\n‚è± {entry['display']} –ø–æ–ª—É—á–∞–µ—Ç {ACTIVE_REWARD} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∏–º–µ! üéÅ"
    save_data()
    return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {entry['display']}: {entry['balance']}{reward_msg}")

@app.route("/bonus")
def bonus():
    user_try = request.args.get("user") or request.args.get("sender") or ""
    user_display = ensure_user_by_candidates(user_try, request.args.get("1")) or user_try
    if not user_display:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    entry = get_user_entry(user_display)
    if entry is None:
        return text_response("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫.")
    now = time.time()
    last = entry.get("last_bonus", 0)
    if now - last < BONUS_INTERVAL:
        remaining = int((BONUS_INTERVAL - (now - last)) / 3600)
        return text_response(f"‚è≥ {entry['display']}, –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {remaining} —á.")
    entry["balance"] += BONUS_AMOUNT
    entry["last_bonus"] = now
    save_data()
    return text_response(f"üéÅ {entry['display']} –ø–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {BONUS_AMOUNT} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {entry['balance']}")

@app.route("/stats")
def stats_route():
    user_try = request.args.get("user") or request.args.get("sender") or ""
    user_display = ensure_user_by_candidates(user_try, request.args.get("1")) or user_try
    if not user_display:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    entry = get_user_entry(user_display)
    if entry is None:
        return text_response("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫.")
    wins = entry.get("wins",0)
    losses = entry.get("losses",0)
    total = wins + losses
    wr = f"{(wins/total*100):.1f}%" if total>0 else "0%"
    save_data()
    return text_response(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {entry['display']}: –ü–æ–±–µ–¥ ‚Äî {wins}, –ü–æ—Ä–∞–∂–µ–Ω–∏–π ‚Äî {losses} (WinRate: {wr})")

@app.route("/top")
def top():
    # build top-10 sorted by balance
    if not balances:
        return text_response("üìâ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!")
    sorted_players = sorted(balances.items(), key=lambda x: x[1].get("balance",0), reverse=True)
    top10 = sorted_players[:10]
    lines = [f"üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:"]
    for i,(k,v) in enumerate(top10, start=1):
        display = v.get("display", k)
        bal = v.get("balance", 0)
        lines.append(f"{i}. {display} ‚Äî {bal}")
    save_data()
    return text_response("\n".join(lines))

@app.route("/admin")
def admin():
    caller = request.args.get("user") or request.args.get("sender") or ""
    caller_key = norm_key(caller)
    if caller_key not in [a.lower() for a in ADMINS]:
        return text_response("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    target = request.args.get("target") or request.args.get("1") or ""
    action = (request.args.get("action") or request.args.get("2") or "").lower()
    amount_raw = request.args.get("amount") or request.args.get("3") or ""

    if not target or not action or not amount_raw:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin?user=AdminNick&target=Nick&action=add|remove&amount=1000")

    try:
        amount = int(amount_raw)
    except:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    entry = get_user_entry(target)
    if entry is None:
        return text_response("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫ —Ü–µ–ª–∏.")

    if action == "add":
        entry["balance"] += amount
        res = f"‚úÖ –ê–¥–º–∏–Ω {caller} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {entry['display']}. –ë–∞–ª–∞–Ω—Å: {entry['balance']}"
    elif action in ("remove","sub","take"):
        entry["balance"] = max(0, entry["balance"] - amount)
        res = f"‚ö†Ô∏è –ê–¥–º–∏–Ω {caller} —Å–Ω—è–ª {amount} –º–æ–Ω–µ—Ç —Å {entry['display']}. –ë–∞–ª–∞–Ω—Å: {entry['balance']}"
    else:
        return text_response("‚ùå Action –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å add –∏–ª–∏ remove")

    save_data()
    return text_response(res)

@app.route("/")
def home():
    return text_response("üé∞ Casino bot API —Ä–∞–±–æ—Ç–∞–µ—Ç!")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
