# -*- coding: utf-8 -*-
from flask import Flask, request, Response
import random, json, time, os

app = Flask(__name__)

BALANCES_FILE = "balances.json"
ADMINS = ["gxku999"]  # üëà –¢–≤–æ–π –Ω–∏–∫ (—Å—Ç—Ä–∏–º–µ—Ä)
BONUS_AMOUNT = 500
BONUS_INTERVAL = 60 * 60 * 24      # 24 —á–∞—Å–∞
ACTIVE_REWARD = 500
ACTIVE_INTERVAL = 60 * 15          # 15 –º–∏–Ω—É—Ç
START_BALANCE = 1000

# === –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if os.path.exists(BALANCES_FILE):
    with open(BALANCES_FILE, "r", encoding="utf-8") as f:
        try:
            balances = json.load(f)
        except:
            balances = {}
else:
    balances = {}

def save_data():
    with open(BALANCES_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

def text_response(msg):
    return Response(msg, mimetype="text/plain; charset=utf-8")

def color_icon(color):
    return {"red": "üü•", "black": "‚¨õ", "green": "üü©"}.get(color, "‚ùì")

def get_user(name):
    name = name.strip().lower()
    if name not in balances:
        balances[name] = {
            "balance": START_BALANCE,
            "wins": 0,
            "losses": 0,
            "last_bonus": 0,
            "last_active": 0
        }
    return balances[name]

# üé∞ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä—É–ª–µ—Ç–∫–∏
@app.route("/roulette")
def roulette():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    user = (request.args.get("user") or "").strip()
    color = (request.args.get("color") or "").strip().lower()
    bet = request.args.get("bet")

    colors = ["red", "black", "green"]

    # üß† ChatElements –∏–Ω–æ–≥–¥–∞ –ø—É—Ç–∞–µ—Ç –º–µ—Å—Ç–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (user –∏ color)
    if user.lower() in colors:
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
        color = user.lower()
        user = (request.args.get("color") or "UnknownUser").strip()

    if not user or not color or not bet:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !roll <red/black/green> <—Å—Ç–∞–≤–∫–∞>")

    try:
        bet = int(bet)
    except ValueError:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    if color not in colors:
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green!")

    data = get_user(user)

    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")

    if data["balance"] < bet:
        return text_response(f"üí∏ {user}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {data['balance']}")

    # üí∏ –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    data["balance"] -= bet

    # üé° –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
    result = random.choices(["red", "black", "green"], weights=[47, 47, 6])[0]
    multiplier = 14 if result == "green" else 2

    if result == color:
        win_amount = bet * multiplier
        data["balance"] += win_amount
        data["wins"] += 1
        msg = (
            f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon(color)}! "
            f"–í—ã–ø–∞–ª–æ {color_icon(result)} ‚Äî ‚úÖ –ü–æ–±–µ–¥–∞! "
            f"| +{win_amount - bet} | –ë–∞–ª–∞–Ω—Å: {data['balance']}"
        )
    else:
        data["losses"] += 1
        msg = (
            f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon(color)}! "
            f"–í—ã–ø–∞–ª–æ {color_icon(result)} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {data['balance']}"
        )

    save_data()
    return text_response(msg)

# üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
@app.route("/balance")
def balance():
    user = request.args.get("user")
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    data = get_user(user)
    now = time.time()

    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {data['balance']} –º–æ–Ω–µ—Ç"

    if now - data["last_active"] >= ACTIVE_INTERVAL:
        data["balance"] += ACTIVE_REWARD
        data["last_active"] = now
        msg += f"\n‚è± {user} –ø–æ–ª—É—á–∞–µ—Ç {ACTIVE_REWARD} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üéÅ"

    save_data()
    return text_response(msg)

# üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
@app.route("/bonus")
def bonus():
    user = request.args.get("user")
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫.")
    data = get_user(user)
    now = time.time()

    if now - data["last_bonus"] < BONUS_INTERVAL:
        remaining = int((BONUS_INTERVAL - (now - data["last_bonus"])) / 3600)
        return text_response(f"‚è≥ {user}, –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {remaining} —á.")

    data["balance"] += BONUS_AMOUNT
    data["last_bonus"] = now
    save_data()
    return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {BONUS_AMOUNT}! –ë–∞–ª–∞–Ω—Å: {data['balance']}")

# üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤
@app.route("/top")
def top():
    if not balances:
        return text_response("–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ üò¥")
    top10 = sorted(balances.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (u, d) in enumerate(top10, 1):
        msg += f"{i}. {u} ‚Äî {d['balance']} –º–æ–Ω–µ—Ç\n"
    return text_response(msg.strip())

# üëë –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã
@app.route("/admin")
def admin():
    user = (request.args.get("user") or "").lower()
    target = request.args.get("target")
    action = request.args.get("action")
    amount = request.args.get("amount")

    if user not in ADMINS:
        return text_response("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not all([target, action, amount]):
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !admin <–Ω–∏–∫> <add/remove> <—Å—É–º–º–∞>")

    try:
        amount = int(amount)
    except ValueError:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    data = get_user(target)
    if action == "add":
        data["balance"] += amount
        msg = f"‚úÖ {user} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target}. –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    elif action == "remove":
        data["balance"] = max(0, data["balance"] - amount)
        msg = f"‚ö†Ô∏è {user} –∑–∞–±—Ä–∞–ª {amount} –º–æ–Ω–µ—Ç —É {target}. –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    else:
        return text_response("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å add –∏–ª–∏ remove")

    save_data()
    return text_response(msg)

@app.route("/")
def home():
    return text_response("‚úÖ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
