from flask import Flask, request
import json, os, random, time, threading

app = Flask(__name__)

BALANCES_FILE = "balances.json"
BONUS_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
BONUS_AMOUNT = 500
DEFAULT_BALANCE = 1500

balances = {}
last_bonus_time = {}

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ ===

def load_balances():
    global balances
    if os.path.exists(BALANCES_FILE):
        with open(BALANCES_FILE, "r", encoding="utf-8") as f:
            try:
                balances = json.load(f)
            except json.JSONDecodeError:
                balances = {}
    else:
        balances = {}

def save_balances():
    tmp = BALANCES_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)
    os.replace(tmp, BALANCES_FILE)

load_balances()

# === –ö–æ–º–∞–Ω–¥—ã ===

@app.route("/balance")
def balance():
    user = request.args.get("user", "").lower()
    if not user:
        return "‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    balance = balances.get(user, DEFAULT_BALANCE)
    balances[user] = balance
    save_balances()

    return f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {balance} –º–æ–Ω–µ—Ç"

@app.route("/bonus")
def bonus():
    user = request.args.get("user", "").lower()
    now = time.time()

    if not user:
        return "‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    last_time = last_bonus_time.get(user, 0)
    if now - last_time < BONUS_INTERVAL:
        mins = int((BONUS_INTERVAL - (now - last_time)) / 60)
        return f"‚è≥ {user}, –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {mins} –º–∏–Ω."

    balances[user] = balances.get(user, DEFAULT_BALANCE) + BONUS_AMOUNT
    last_bonus_time[user] = now
    save_balances()

    return f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç {BONUS_AMOUNT} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ë–∞–ª–∞–Ω—Å: {balances[user]}"

@app.route("/roll")
def roll():
    user = request.args.get("user", "").lower()
    color = request.args.get("color", "").lower()
    bet = request.args.get("bet", "")

    if not user or not color or not bet:
        return "‚ùå –§–æ—Ä–º–∞—Ç: !roll <red|black|green> <—Å—Ç–∞–≤–∫–∞>"

    try:
        bet = int(bet)
    except ValueError:
        return "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!"

    balance = balances.get(user, DEFAULT_BALANCE)
    if bet <= 0:
        return "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!"
    if bet > balance:
        return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance}"

    result = random.choice(["red", "black", "green"])
    color_emoji = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

    if result == color:
        multiplier = 14 if result == "green" else 2
        win = bet * (multiplier - 1)
        balance += win
        outcome = f"‚úÖ –ü–æ–±–µ–¥–∞! | +{win}"
    else:
        balance -= bet
        outcome = f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | -{bet}"

    balances[user] = balance
    save_balances()

    return f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_emoji.get(color,'‚ùì')}! –í—ã–ø–∞–ª–æ {color_emoji[result]} ‚Äî {outcome} | –ë–∞–ª–∞–Ω—Å: {balance}"

@app.route("/top")
def top():
    if not balances:
        return "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."

    sorted_bal = sorted(balances.items(), key=lambda x: x[1], reverse=True)[:10]
    lines = [f"{i+1}. {u}: {b} –º–æ–Ω–µ—Ç" for i, (u, b) in enumerate(sorted_bal)]
    return "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines)

@app.route("/stats")
def stats():
    user = request.args.get("user", "").lower()
    if not user:
        return "‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    bal = balances.get(user, DEFAULT_BALANCE)
    return f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user}:\nüí∞ –ë–∞–ª–∞–Ω—Å: {bal}"

# === –ê–≤—Ç–æ–±–æ–Ω—É—Å ===
def auto_bonus():
    while True:
        for user in list(balances.keys()):
            balances[user] += BONUS_AMOUNT
        save_balances()
        print(f"[AUTO BONUS] –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤—ã–¥–∞–Ω–æ +{BONUS_AMOUNT}")
        time.sleep(BONUS_INTERVAL)

threading.Thread(target=auto_bonus, daemon=True).start()

# === –ó–∞–ø—É—Å–∫ ===
@app.route("/")
def index():
    return "‚úÖ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
