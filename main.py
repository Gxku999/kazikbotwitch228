# -*- coding: utf-8 -*-
from flask import Flask, request, Response
import requests, base64, json, os, time, random, traceback

app = Flask(__name__)

# --- CONFIG: —É—Å—Ç–∞–Ω–æ–≤–∏ –≤ Render environment variables ---
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")        # ghp_xxx
GITHUB_REPO  = os.getenv("GITHUB_REPO")         # "username/repo"
GITHUB_BRANCH = os.getenv("GITHUB_BRANCH", "main")
GITHUB_FILE = "balances.json"

# –ø–æ–≤–µ–¥–µ–Ω–∏–µ
START_BALANCE = 1500
BONUS_COINS = 500
BONUS_INTERVAL = 15 * 60   # 15 –º–∏–Ω—É—Ç

COLORS = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

# ---------------- GitHub helpers ----------------
def gh_headers():
    return {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

def load_balances():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç balances.json –∏–∑ GitHub –∏ –ø–∞—Ä—Å–∏—Ç. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict."""
    try:
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_FILE}?ref={GITHUB_BRANCH}"
        r = requests.get(url, headers=gh_headers(), timeout=15)
        if r.status_code == 200:
            payload = r.json()
            content = base64.b64decode(payload["content"]).decode("utf-8")
            return json.loads(content)
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            print("GH load_balances status:", r.status_code, r.text)
            return {}
    except Exception:
        print("Exception in load_balances:", traceback.format_exc())
        return {}

def save_balances(data):
    """–ó–∞–ª–∏–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ balances.json –≤ GitHub (PUT)."""
    try:
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_FILE}"
        r = requests.get(url, headers=gh_headers(), timeout=15)
        sha = None
        if r.status_code == 200:
            sha = r.json().get("sha")

        content = json.dumps(data, ensure_ascii=False, indent=4)
        encoded = base64.b64encode(content.encode()).decode()

        payload = {
            "message": "update balances.json",
            "content": encoded,
            "branch": GITHUB_BRANCH
        }
        if sha:
            payload["sha"] = sha

        resp = requests.put(url, headers=gh_headers(), json=payload, timeout=15)
        if resp.status_code not in (200,201):
            print("GH save error:", resp.status_code, resp.text)
            # –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ —É–ø–∞–ª, –ª–æ–≥–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        return True
    except Exception:
        print("Exception in save_balances:", traceback.format_exc())
        return False

# ---------------- utilities ----------------
def text_response(msg: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º plain text (—á—Ç–æ–±—ã StreamElements –ø–æ–∫–∞–∑—ã–≤–∞–ª —Ç–µ–∫—Å—Ç, –∞ –Ω–µ JSON)."""
    return Response(msg, mimetype="text/plain; charset=utf-8")

def norm_user(u: str) -> str:
    return (u or "").strip().lower()

# ---------------- route handlers ----------------

@app.route("/")
def home():
    return text_response("üé∞ Casino bot (GitHub-backed) is running")

@app.route("/balance")
def balance_route():
    user_raw = request.args.get("user") or ""
    user = norm_user(user_raw)
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫: !balance")

    data = load_balances()
    if user not in data:
        data[user] = {"balance": START_BALANCE, "wins": 0, "losses": 0, "last_active": 0}
        save_balances(data)

    bal = data[user]["balance"]
    return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {user_raw}: {bal} –º–æ–Ω–µ—Ç")

@app.route("/bonus")
def bonus_route():
    user_raw = request.args.get("user") or ""
    user = norm_user(user_raw)
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫: !bonus")

    data = load_balances()
    if user not in data:
        data[user] = {"balance": START_BALANCE, "wins": 0, "losses": 0, "last_active": 0, "last_bonus": 0}

    now = int(time.time())
    last = int(data[user].get("last_bonus", 0))
    if now - last >= BONUS_INTERVAL:
        data[user]["balance"] = data[user].get("balance", START_BALANCE) + BONUS_COINS
        data[user]["last_bonus"] = now
        save_balances(data)
        return text_response(f"üéÅ {user_raw} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å {BONUS_COINS} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {data[user]['balance']}")
    else:
        remain = BONUS_INTERVAL - (now - last)
        mins = remain // 60
        return text_response(f"‚è≥ {user_raw}, –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {mins} –º–∏–Ω—É—Ç")

@app.route("/roll")
def roll_route():
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ StreamElements –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å:
    # user (–Ω–∏–∫) - –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º ${sender} –≤ —à–∞–±–ª–æ–Ω–µ
    user_raw = request.args.get("user") or ""
    color_in = request.args.get("color") or ""
    bet_raw = request.args.get("bet") or ""

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    user = norm_user(user_raw)
    color = (color_in or "").strip().lower()
    try:
        bet = int(bet_raw)
    except:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º! –ü—Ä–∏–º–µ—Ä: !roll red 100")

    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫! –ü—Ä–∏–º–µ—Ä: !roll red 100")
    if color not in COLORS:
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green!")
    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = load_balances()
    if user not in data:
        data[user] = {"balance": START_BALANCE, "wins": 0, "losses": 0, "last_active": 0, "last_bonus": 0}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if data[user]["balance"] < bet:
        return text_response(f"üí∏ {user_raw}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {data[user]['balance']}")

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É —Å—Ä–∞–∑—É
    data[user]["balance"] -= bet

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.choices(["red", "black", "green"], weights=[48,48,4], k=1)[0]

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–≥–∞–¥–∞–ª ‚Äî –≤—ã–ø–ª–∞—Ça = bet * multiplier
    if result == color:
        multiplier = 14 if color == "green" else 2
        payout = bet * multiplier
        # –¥–æ–±–∞–≤–ª—è–µ–º payout (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–Ω—è—Ç–∞)
        data[user]["balance"] += payout
        data[user]["wins"] = data[user].get("wins",0) + 1
        net = payout - bet  # —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        outcome = f"‚úÖ –ü–æ–±–µ–¥–∞! | +{net} | –ë–∞–ª–∞–Ω—Å: {data[user]['balance']}"
    else:
        data[user]["losses"] = data[user].get("losses",0) + 1
        outcome = f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {data[user]['balance']}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub (–∏ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π balances –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
    save_balances(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –Ω–∏–∫–∞ user_raw –¥–ª—è –≤—ã–≤–æ–¥–∞)
    msg = f"üé∞ {user_raw} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {COLORS[color]}! –í—ã–ø–∞–ª–æ {COLORS[result]} ‚Äî {outcome}"
    return text_response(msg)

@app.route("/top")
def top_route():
    data = load_balances()
    if not data:
        return text_response("üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤")
    sorted_players = sorted(data.items(), key=lambda x: x[1].get("balance",0), reverse=True)[:10]
    lines = [f"üèÜ –¢–û–ü 10 –∏–≥—Ä–æ–∫–æ–≤:"]
    for i,(name,info) in enumerate(sorted_players, start=1):
        lines.append(f"{i}. {name} ‚Äî {info.get('balance',0)}")
    return text_response("\n".join(lines))

@app.route("/stats")
def stats_route():
    user_raw = request.args.get("user") or ""
    user = norm_user(user_raw)
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –Ω–∏–∫: !stats")
    data = load_balances()
    if user not in data:
        return text_response("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
    wins = data[user].get("wins",0)
    losses = data[user].get("losses",0)
    total = wins + losses
    wr = f"{(wins/total*100):.1f}%" if total>0 else "0%"
    return text_response(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_raw}: –ü–æ–±–µ–¥—ã ‚Äî {wins}, –ü–æ—Ä–∞–∂–µ–Ω–∏—è ‚Äî {losses}, WinRate ‚Äî {wr}")

# ---- admin endpoint (only checks caller param; make sure in StreamElements user=${sender}) ----
@app.route("/admin")
def admin_route():
    caller = (request.args.get("user") or "").strip().lower()
    target_raw = request.args.get("target") or ""
    action = (request.args.get("action") or "").strip().lower()
    amount_raw = request.args.get("amount") or ""

    if caller not in [a.lower() for a in (os.getenv("ADMINS","gxku999").split(",") if os.getenv("ADMINS") else ["gxku999"])]:
        return text_response("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not target_raw or not action or not amount_raw:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !admin <–Ω–∏–∫> <add|remove> <—Å—É–º–º–∞>")

    target = norm_user(target_raw)
    try:
        amount = int(amount_raw)
    except:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    data = load_balances()
    if target not in data:
        data[target] = {"balance": START_BALANCE, "wins":0, "losses":0, "last_active":0, "last_bonus":0}

    if action == "add":
        data[target]["balance"] = data[target].get("balance",START_BALANCE) + amount
        save_balances(data)
        return text_response(f"‚úÖ –ê–¥–º–∏–Ω {caller} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target_raw}. –ë–∞–ª–∞–Ω—Å: {data[target]['balance']}")
    elif action in ("remove","sub","take"):
        data[target]["balance"] = max(0, data[target].get("balance",START_BALANCE) - amount)
        save_balances(data)
        return text_response(f"‚úÖ –ê–¥–º–∏–Ω {caller} —Å–Ω—è–ª {amount} –º–æ–Ω–µ—Ç —Å –∏–≥—Ä–æ–∫–∞ {target_raw}. –ë–∞–ª–∞–Ω—Å: {data[target]['balance']}")
    else:
        return text_response("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å add –∏–ª–∏ remove")

# ---------------- Run ----------------
if __name__ == "__main__":
    # quick check: env
    if not GITHUB_TOKEN or not GITHUB_REPO:
        print("WARNING: GITHUB_TOKEN or GITHUB_REPO not set. GitHub sync will fail.")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", "10000")))
