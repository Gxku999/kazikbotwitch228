from flask import Flask, request, Response
import requests, json, os, time, random

app = Flask(__name__)

# === CONFIG ===
REPO = os.getenv("GITHUB_REPO")
TOKEN = os.getenv("GITHUB_TOKEN")
FILE_PATH = "balances.json"
BRANCH = "main"

# === HELPER FUNCTIONS ===
def text_response(msg: str):
    return Response(json.dumps({"message": msg}, ensure_ascii=False),
                    mimetype="application/json; charset=utf-8")

def load_balances():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ GitHub"""
    url = f"https://api.github.com/repos/{REPO}/contents/{FILE_PATH}"
    headers = {"Authorization": f"token {TOKEN}"}
    res = requests.get(url, headers=headers)
    if res.status_code == 200:
        content = json.loads(res.json()["content"].encode())
        data = json.loads(base64.b64decode(res.json()["content"]).decode())
        return data
    else:
        return {}

def save_balances(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ GitHub"""
    url = f"https://api.github.com/repos/{REPO}/contents/{FILE_PATH}"
    headers = {"Authorization": f"token {TOKEN}"}
    get_res = requests.get(url, headers=headers)
    sha = get_res.json().get("sha", None)

    encoded = base64.b64encode(json.dumps(data, ensure_ascii=False, indent=2).encode()).decode()
    payload = {
        "message": "update balances.json",
        "content": encoded,
        "branch": BRANCH,
        "sha": sha
    }
    requests.put(url, headers=headers, json=payload)

# === ROUTES ===
@app.route("/")
def home():
    return text_response("‚úÖ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@app.route("/balance")
def balance():
    user = request.args.get("user")
    balances = load_balances()
    if user not in balances:
        balances[user] = {"balance": 1500, "wins": 0, "losses": 0, "last_bonus": 0}
        save_balances(balances)
    bal = balances[user]["balance"]
    return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {bal} –º–æ–Ω–µ—Ç")

@app.route("/bonus")
def bonus():
    user = request.args.get("user")
    balances = load_balances()
    if user not in balances:
        balances[user] = {"balance": 1500, "wins": 0, "losses": 0, "last_bonus": 0}

    now = time.time()
    last_bonus = balances[user].get("last_bonus", 0)
    if now - last_bonus < 900:  # 15 –º–∏–Ω—É—Ç
        remain = int(900 - (now - last_bonus)) // 60
        return text_response(f"‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {remain} –º–∏–Ω.")
    
    balances[user]["balance"] += 500
    balances[user]["last_bonus"] = now
    save_balances(balances)
    return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∏–ª 500 –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ë–∞–ª–∞–Ω—Å: {balances[user]['balance']}")

@app.route("/roll")
def roll():
    user = request.args.get("user")
    color = request.args.get("color")
    bet = request.args.get("bet")

    if not color or not bet:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !roll [red/black/green] [—Å—Ç–∞–≤–∫–∞]")

    balances = load_balances()
    if user not in balances:
        balances[user] = {"balance": 1500, "wins": 0, "losses": 0, "last_bonus": 0}

    try:
        bet = int(bet)
    except:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")

    if balances[user]["balance"] < bet:
        return text_response("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    balances[user]["balance"] -= bet

    # —Ä—É–ª–µ—Ç–∫–∞
    result = random.choices(["red", "black", "green"], weights=[48, 48, 4])[0]
    color_emoji = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

    if result == color:
        multiplier = 14 if color == "green" else 2
        win = bet * multiplier
        balances[user]["balance"] += win
        balances[user]["wins"] += 1
        msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_emoji[color]}! –í—ã–ø–∞–ª–æ {color_emoji[result]} ‚Äî ‚úÖ –ü–æ–±–µ–¥–∞! | +{win} | –ë–∞–ª–∞–Ω—Å: {balances[user]['balance']}"
    else:
        balances[user]["losses"] += 1
        msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_emoji[color]}! –í—ã–ø–∞–ª–æ {color_emoji[result]} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {balances[user]['balance']}"

    save_balances(balances)
    return text_response(msg)

@app.route("/top")
def top():
    balances = load_balances()
    top_users = sorted(balances.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    msg = "üèÜ –¢–û–ü 10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user, data) in enumerate(top_users, 1):
        msg += f"{i}. {user}: {data['balance']} –º–æ–Ω–µ—Ç\n"
    return text_response(msg.strip())

@app.route("/stats")
def stats():
    user = request.args.get("user")
    balances = load_balances()
    if user not in balances:
        return text_response(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ {user}.")
    stats = balances[user]
    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user}: –ü–æ–±–µ–¥—ã ‚Äî {stats['wins']} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è ‚Äî {stats['losses']}"
    return text_response(msg)

# === MAIN ===
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
