from flask import Flask, request
import random
import json
import time
import os

app = Flask(__name__)

DATA_FILE = "balances.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        balances = json.load(f)
else:
    balances = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(user):
    if user not in balances:
        balances[user] = {
            "balance": 1000,
            "wins": 0,
            "losses": 0,
            "last_bonus": 0
        }

@app.route("/")
def home():
    return "Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/roll")
def roll():
    user = request.args.get("user")
    color = request.args.get("color", "").lower()
    bet = request.args.get("bet", "")

    if not user:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    if not bet.isdigit():
        return "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!"

    bet = int(bet)
    init_user(user)

    balance = balances[user]["balance"]
    if bet > balance:
        return f"{user}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance}"

    if color not in ["red", "black", "green"]:
        return "–ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ red, black –∏–ª–∏ green."

    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Ü–≤–µ—Ç
    result = random.choices(["red", "black", "green"], weights=[48, 48, 4])[0]

    if color == result:
        multiplier = 14 if result == "green" else 2
        win = bet * (multiplier - 1)
        balances[user]["balance"] += win
        balances[user]["wins"] += 1
        msg = f"{user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color}... –í—ã–ø–∞–ª–æ {result}! –ü–æ–±–µ–¥–∞ +{win}! –ë–∞–ª–∞–Ω—Å: {balances[user]['balance']}"
    else:
        balances[user]["balance"] -= bet
        balances[user]["losses"] += 1
        msg = f"{user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color}... –í—ã–ø–∞–ª–æ {result}! –ü—Ä–æ–∏–≥—Ä—ã—à -{bet}. –ë–∞–ª–∞–Ω—Å: {balances[user]['balance']}"

    save_data()
    return msg

@app.route("/balance")
def balance():
    user = request.args.get("user")
    if not user:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    init_user(user)
    data = balances[user]
    return f"{user}, –±–∞–ª–∞–Ω—Å: {data['balance']}. –ü–æ–±–µ–¥: {data['wins']}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {data['losses']}."

@app.route("/bonus")
def bonus():
    user = request.args.get("user")
    if not user:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    init_user(user)
    now = time.time()
    last = balances[user]["last_bonus"]

    if now - last < 86400:  # 24 —á–∞—Å–∞
        remaining = int((86400 - (now - last)) / 3600)
        return f"{user}, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining} —á."
    else:
        balances[user]["balance"] += 500
        balances[user]["last_bonus"] = now
        save_data()
        return f"{user}, —Ç—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å +500 –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balances[user]['balance']}."

@app.route("/top")
def top():
    if not balances:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."

    top_players = sorted(balances.items(), key=lambda x: x[1]["balance"], reverse=True)[:5]
    msg = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (name, data) in enumerate(top_players, start=1):
        msg += f"{i}. {name} ‚Äî {data['balance']}\n"
    return msg.strip()

@app.route("/stats")
def stats():
    user = request.args.get("user")
    if not user:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    init_user(user)
    w = balances[user]["wins"]
    l = balances[user]["losses"]
    total = w + l
    winrate = 0 if total == 0 else round((w / total) * 100, 1)
    return f"{user}: –ø–æ–±–µ–¥ ‚Äî {w}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π ‚Äî {l} (–≤–∏–Ω—Ä–µ–π—Ç {winrate}%)."

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
