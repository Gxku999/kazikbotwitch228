from flask import Flask, request, jsonify
import random
import json
import os
import time

app = Flask(__name__)

DATA_FILE = "balances.json"
BONUS_INTERVAL = 15 * 60  # 15 –º–∏–Ω—É—Ç
DAILY_BONUS = 500
ACTIVE_BONUS = 500
START_BALANCE = 1000

ADMINS = ["gxku999"]  # üëâ —Ç–≤–æ–π –Ω–∏–∫ –Ω–∞ Twitch

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def color_icon(color):
    return {"red": "üü•", "black": "‚¨õ", "green": "üü©"}.get(color, "‚ùì")

def text_response(message):
    return jsonify({"message": message})

def get_user(user):
    if user not in users:
        users[user] = {
            "balance": START_BALANCE,
            "wins": 0,
            "losses": 0,
            "last_bonus": 0,
            "last_active": 0
        }
    return users[user]

users = load_data()

# --- –†–æ—É—Ç—ã ---
@app.route("/")
def home():
    return "üé∞ Twitch Casino Bot is running!"

@app.route("/balance")
def balance():
    user = request.args.get("user", "").strip()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    data = get_user(user)
    now = time.time()

    # –ê–≤—Ç–æ–±–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    if now - data["last_active"] >= BONUS_INTERVAL:
        data["balance"] += ACTIVE_BONUS
        data["last_active"] = now
        save_data()
        return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {data['balance']} –º–æ–Ω–µ—Ç\n‚è± {user} –ø–æ–ª—É—á–∞–µ—Ç {ACTIVE_BONUS} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üéÅ")

    return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {data['balance']} –º–æ–Ω–µ—Ç")

@app.route("/bonus")
def bonus():
    user = request.args.get("user", "").strip()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    data = get_user(user)
    now = time.time()

    if now - data["last_bonus"] < 24 * 3600:
        return text_response(f"‚è≥ {user}, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ üéÅ")

    data["balance"] += DAILY_BONUS
    data["last_bonus"] = now
    save_data()

    return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å {DAILY_BONUS}! –ë–∞–ª–∞–Ω—Å: {data['balance']}")

@app.route("/roll")
def roll():
    user = request.args.get("user", "").strip()
    color = request.args.get("color", "").lower().strip()
    bet = request.args.get("bet", "").strip()

    if not user or not color or not bet:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !roll <red/black/green> <—Å—Ç–∞–≤–∫–∞>")

    try:
        bet = int(bet)
    except ValueError:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    if color not in ["red", "black", "green"]:
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green!")

    data = get_user(user)
    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")

    if data["balance"] < bet:
        return text_response(f"üí∏ {user}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {data['balance']}")

    # —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    data["balance"] -= bet

    # —Ä—É–ª–µ—Ç–∫–∞
    result = random.choices(["red", "black", "green"], weights=[47, 47, 6])[0]
    multiplier = 14 if result == "green" else 2

    if result == color:
        win_amount = bet * multiplier
        data["balance"] += win_amount
        data["wins"] += 1
        msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon(color)}! –í—ã–ø–∞–ª–æ {color_icon(result)} ‚Äî ‚úÖ –ü–æ–±–µ–¥–∞! +{win_amount - bet} | –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    else:
        data["losses"] += 1
        msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {color_icon(color)}! –í—ã–ø–∞–ª–æ {color_icon(result)} ‚Äî ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {data['balance']}"

    save_data()
    return text_response(msg)

@app.route("/stats")
def stats():
    user = request.args.get("user", "").strip()
    if not user:
        return text_response("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    data = get_user(user)
    total = data["wins"] + data["losses"]
    winrate = (data["wins"] / total * 100) if total > 0 else 0
    return text_response(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user}: –ü–æ–±–µ–¥—ã ‚Äî {data['wins']}, –ü–æ—Ä–∞–∂–µ–Ω–∏—è ‚Äî {data['losses']}, WinRate ‚Äî {winrate:.1f}% | –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    )

@app.route("/top")
def top():
    top_users = sorted(users.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (name, data) in enumerate(top_users, start=1):
        msg += f"{i}. {name} ‚Äî {data['balance']} –º–æ–Ω–µ—Ç\n"
    return text_response(msg.strip())

@app.route("/admin")
def admin():
    user = request.args.get("user", "").strip().lower()
    target = request.args.get("target", "").strip()
    action = request.args.get("action", "").lower()
    amount = request.args.get("amount", "").strip()

    if user not in [a.lower() for a in ADMINS]:
        return text_response("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

    if not target or not action or not amount:
        return text_response("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !admin <–Ω–∏–∫> <add/remove> <—Å—É–º–º–∞>")

    try:
        amount = int(amount)
    except ValueError:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    data = get_user(target)

    if action == "add":
        data["balance"] += amount
        msg = f"‚úÖ {user} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target}. –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    elif action == "remove":
        data["balance"] = max(0, data["balance"] - amount)
        msg = f"‚ö†Ô∏è {user} –∑–∞–±—Ä–∞–ª {amount} –º–æ–Ω–µ—Ç —É {target}. –ë–∞–ª–∞–Ω—Å: {data['balance']}"
    else:
        return text_response("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'add' –∏–ª–∏ 'remove'.")

    save_data()
    return text_response(msg)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
