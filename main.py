from flask import Flask, request, Response
import random, json, os, time, base64, requests, threading

app = Flask(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
balances = {}
active_viewers = {}
BONUS_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç
BONUS_AMOUNT = 500
START_BALANCE = 1500

# === GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO")
GITHUB_API = f"https://api.github.com/repos/{GITHUB_REPO}/contents/balances.json"


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub ===
def load_balances():
    global balances
    try:
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        r = requests.get(GITHUB_API, headers=headers)
        if r.status_code == 200:
            data = r.json()
            content = base64.b64decode(data["content"]).decode()
            balances = json.loads(content)
            print("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub.")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã:", r.status_code, r.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:", e)


def save_balances():
    try:
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }
        r = requests.get(GITHUB_API, headers=headers)
        sha = None
        if r.status_code == 200:
            sha = r.json().get("sha")

        content = base64.b64encode(json.dumps(balances, indent=2).encode()).decode()
        data = {
            "message": "update balances.json",
            "content": content,
            "sha": sha
        }
        res = requests.put(GITHUB_API, headers=headers, data=json.dumps(data))
        print("üíæ –ë–∞–ª–∞–Ω—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:", res.status_code)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:", e)


# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤ ===
def add_bonus():
    while True:
        time.sleep(BONUS_INTERVAL)
        for user in list(active_viewers.keys()):
            balances[user] = balances.get(user, START_BALANCE) + BONUS_AMOUNT
        save_balances()
        print("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–º –∑—Ä–∏—Ç–µ–ª—è–º!")


threading.Thread(target=add_bonus, daemon=True).start()


# === –ú–∞—Ä—à—Ä—É—Ç—ã API ===
@app.route("/")
def index():
    return Response("üé∞ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!", mimetype="text/plain")


@app.route("/balance")
def balance():
    user = request.args.get("user", "").lower()
    if not user:
        return Response("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω", mimetype="text/plain")

    balance = balances.get(user, START_BALANCE)
    balances[user] = balance
    active_viewers[user] = time.time()
    save_balances()

    msg = f"üí∞ –ë–∞–ª–∞–Ω—Å @{user}: {balance} –º–æ–Ω–µ—Ç"
    return Response(msg, mimetype="text/plain")


@app.route("/roll")
def roll():
    user = request.args.get("user", "").lower()
    color = request.args.get("color", "").lower()
    bet = request.args.get("bet", "0")

    try:
        bet = int(bet)
    except:
        return Response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!", mimetype="text/plain")

    if bet <= 0:
        return Response("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", mimetype="text/plain")

    balances[user] = balances.get(user, START_BALANCE)
    if bet > balances[user]:
        return Response(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balances[user]}", mimetype="text/plain")

    result = random.choice(["red", "black", "green"])
    colors = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

    win = 0
    if color == result:
        if result == "green":
            win = bet * 14
        else:
            win = bet * 2
        balances[user] += win - bet
        outcome = f"‚úÖ –ü–æ–±–µ–¥–∞! | +{win - bet}"
    else:
        balances[user] -= bet
        outcome = "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"

    save_balances()
    msg = f"üé∞ @{user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {colors.get(color, '‚ùì')}! –í—ã–ø–∞–ª–æ {colors[result]} ‚Äî {outcome} | –ë–∞–ª–∞–Ω—Å: {balances[user]}"
    return Response(msg, mimetype="text/plain")


@app.route("/top")
def top():
    if not balances:
        return Response("üèÜ –¢–æ–ø –ø—É—Å—Ç!", mimetype="text/plain")

    top10 = sorted(balances.items(), key=lambda x: x[1], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join([f"{i+1}. {u}: {b}" for i, (u, b) in enumerate(top10)])
    return Response(msg, mimetype="text/plain")


@app.route("/bonus")
def bonus():
    user = request.args.get("user", "").lower()
    if not user:
        return Response("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", mimetype="text/plain")

    balances[user] = balances.get(user, START_BALANCE) + BONUS_AMOUNT
    save_balances()

    msg = f"üéÅ @{user} –ø–æ–ª—É—á–∞–µ—Ç {BONUS_AMOUNT} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balances[user]}"
    return Response(msg, mimetype="text/plain")


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    load_balances()
    app.run(host="0.0.0.0", port=10000)
