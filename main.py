from flask import Flask, request, jsonify
import random, json, os, time, base64, requests, threading

app = Flask(__name__)

# ======== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ========
balances = {}
stats = {}
active_viewers = {}
BONUS_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç = 900 —Å–µ–∫—É–Ω–¥
BONUS_AMOUNT = 500
START_BALANCE = 1500

# ======== GITHUB ========
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO")
GITHUB_API = f"https://api.github.com/repos/{GITHUB_REPO}/contents/balances.json"

# ======== –§–£–ù–ö–¶–ò–ò ========
def load_balances():
    global balances
    try:
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        r = requests.get(GITHUB_API, headers=headers)
        if r.status_code == 200:
            data = r.json()
            content = base64.b64decode(data["content"]).decode()
            balances = json.loads(content)
            print("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub.")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã:", r.status_code, r.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:", e)

def save_balances():
    try:
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }
        r = requests.get(GITHUB_API, headers=headers)
        sha = None
        if r.status_code == 200:
            sha = r.json().get("sha")

        content = base64.b64encode(json.dumps(balances, indent=2).encode()).decode()
        data = {
            "message": "update balances.json",
            "content": content,
            "sha": sha
        }
        res = requests.put(GITHUB_API, headers=headers, data=json.dumps(data))
        print("üíæ –ë–∞–ª–∞–Ω—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub:", res.status_code)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:", e)

def add_bonus():
    while True:
        time.sleep(BONUS_INTERVAL)
        for user in list(active_viewers.keys()):
            balances[user] = balances.get(user, START_BALANCE) + BONUS_AMOUNT
        save_balances()
        print("üéÅ –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤ –Ω–∞—á–∏—Å–ª–µ–Ω –≤—Å–µ–º –∑—Ä–∏—Ç–µ–ª—è–º!")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –±–æ–Ω—É—Å–∞–º–∏
threading.Thread(target=add_bonus, daemon=True).start()

# ======== API ========
@app.route("/")
def index():
    return "üé∞ Twitch Casino Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/balance")
def balance():
    user = request.args.get("user", "").lower()
    if not user:
        return jsonify({"message": "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"})
    balance = balances.get(user, START_BALANCE)
    active_viewers[user] = time.time()
    save_balances()
    return jsonify({"message": f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {balance} –º–æ–Ω–µ—Ç"})

@app.route("/roll")
def roll():
    user = request.args.get("user", "").lower()
    color = request.args.get("color", "").lower()
    bet = request.args.get("bet", "0")

    try:
        bet = int(bet)
    except:
        return jsonify({"message": "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!"})

    if bet <= 0:
        return jsonify({"message": "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!"})

    balances[user] = balances.get(user, START_BALANCE)
    if bet > balances[user]:
        return jsonify({"message": f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balances[user]}"})

    result = random.choice(["red", "black", "green"])
    colors = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

    multiplier = 2 if color == result else 0
    if result == "green":
        multiplier = 14

    win = bet * (multiplier - (1 if multiplier == 0 else 0))
    balances[user] += win - bet
    save_balances()

    outcome = "‚úÖ –ü–æ–±–µ–¥–∞!" if win > 0 else "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"
    msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {colors.get(color, '‚ùì')}! –í—ã–ø–∞–ª–æ {colors[result]} ‚Äî {outcome} | –ë–∞–ª–∞–Ω—Å: {balances[user]}"
    return jsonify({"message": msg})

@app.route("/top")
def top():
    if not balances:
        return jsonify({"message": "–¢–æ–ø –ø—É—Å—Ç!"})
    top10 = sorted(balances.items(), key=lambda x: x[1], reverse=True)[:10]
    msg = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join([f"{i+1}. {u}: {b}" for i, (u, b) in enumerate(top10)])
    return jsonify({"message": msg})

@app.route("/bonus")
def bonus():
    user = request.args.get("user", "").lower()
    if not user:
        return jsonify({"message": "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"})
    balances[user] = balances.get(user, START_BALANCE) + BONUS_AMOUNT
    save_balances()
    return jsonify({"message": f"üéÅ {user} –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å {BONUS_AMOUNT} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balances[user]}"})

# ======== –°–¢–ê–†–¢ ========
if __name__ == "__main__":
    load_balances()
    app.run(host="0.0.0.0", port=10000)
