from flask import Flask, request, Response
import random
import json
import os
import time

app = Flask(__name__)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
BALANCE_FILE = "balances.json"
BONUS_AMOUNT = 500
BONUS_INTERVAL = 15 * 60  # 15 –º–∏–Ω—É—Ç
ADMINS = ["gxku999"]  # <-- –¢–≤–æ–π –Ω–∏–∫ –Ω–∞ Twitch
START_BALANCE = 1000

# ====== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ======
if not os.path.exists(BALANCE_FILE):
    with open(BALANCE_FILE, "w") as f:
        json.dump({}, f)

def load_balances():
    with open(BALANCE_FILE, "r") as f:
        return json.load(f)

def save_balances(data):
    with open(BALANCE_FILE, "w") as f:
        json.dump(data, f, indent=4)

def text_response(msg: str):
    return Response(msg, mimetype="text/plain; charset=utf-8")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def get_balance(user):
    data = load_balances()
    user = user.lower()
    if user not in data:
        data[user] = {
            "balance": START_BALANCE,
            "last_bonus": 0,
            "wins": 0,
            "losses": 0
        }
        save_balances(data)
    return data[user]["balance"]

def update_balance(user, amount):
    data = load_balances()
    user = user.lower()
    if user not in data:
        get_balance(user)
        data = load_balances()
    data[user]["balance"] += amount
    if data[user]["balance"] < 0:
        data[user]["balance"] = 0
    save_balances(data)

def can_get_bonus(user):
    data = load_balances()
    user = user.lower()
    now = time.time()
    last = data[user].get("last_bonus", 0)
    if now - last >= BONUS_INTERVAL:
        data[user]["last_bonus"] = now
        data[user]["balance"] += BONUS_AMOUNT
        save_balances(data)
        return True
    return False

# ====== –ö–û–ú–ê–ù–î–´ ======

@app.route("/")
def home():
    return text_response("‚úÖ –ö–∞–∑–∏–Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥—ã: !roll, !balance, !bonus, !top, !stats")

@app.route("/roll")
def roll():
    user = request.args.get("user")
    color = request.args.get("color")
    bet = request.args.get("bet")

    if not user or not color or not bet:
        return text_response("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !roll <red|black|green> <—Å—Ç–∞–≤–∫–∞>")

    color = color.lower()
    if color not in ["red", "black", "green"]:
        return text_response("‚ùå –¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å red, black –∏–ª–∏ green!")

    try:
        bet = int(bet)
    except ValueError:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    balance = get_balance(user)
    if bet <= 0:
        return text_response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
    if bet > balance:
        return text_response(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance}")

    # –†—É–ª–µ—Ç–∫–∞
    result = random.choices(
        ["red", "black", "green"],
        weights=[47, 47, 6],
        k=1
    )[0]

    emojis = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

    data = load_balances()
    user_data = data[user.lower()]

    if color == result:
        multiplier = 14 if result == "green" else 2
        win = bet * multiplier
        update_balance(user, win)
        user_data["wins"] += 1
        outcome = f"‚úÖ –ü–æ–±–µ–¥–∞! | +{win} | –ë–∞–ª–∞–Ω—Å: {get_balance(user)}"
    else:
        update_balance(user, -bet)
        user_data["losses"] += 1
        outcome = f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | –ë–∞–ª–∞–Ω—Å: {get_balance(user)}"

    save_balances(data)

    msg = f"üé∞ {user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {emojis[color]}! –í—ã–ø–∞–ª–æ {emojis[result]} ‚Äî {outcome}"
    return text_response(msg)

@app.route("/balance")
def balance():
    user = request.args.get("user")
    if not user:
        return text_response("‚ö† –£–∫–∞–∂–∏—Ç–µ –∏–º—è: !balance")

    balance = get_balance(user)
    bonus_msg = ""
    if can_get_bonus(user):
        bonus_msg = f"\n‚è± {user} –ø–æ–ª—É—á–∞–µ—Ç {BONUS_AMOUNT} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∏–º–µ! üéÅ"

    return text_response(f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {balance} –º–æ–Ω–µ—Ç{bonus_msg}")

@app.route("/bonus")
def bonus():
    user = request.args.get("user")
    if not user:
        return text_response("‚ö† –£–∫–∞–∂–∏—Ç–µ –∏–º—è: !bonus")

    if can_get_bonus(user):
        return text_response(f"üéÅ {user} –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å {BONUS_AMOUNT} –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {get_balance(user)}")
    else:
        return text_response(f"‚è± {user}, –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç!")

@app.route("/top")
def top():
    data = load_balances()
    top10 = sorted(data.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    lines = [f"{i+1}. {name} ‚Äî {info['balance']} –º–æ–Ω–µ—Ç" for i, (name, info) in enumerate(top10)]
    return text_response("üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(lines))

@app.route("/stats")
def stats():
    user = request.args.get("user")
    if not user:
        return text_response("‚ö† –£–∫–∞–∂–∏—Ç–µ –∏–º—è: !stats")

    data = load_balances()
    user = user.lower()
    if user not in data:
        get_balance(user)
        data = load_balances()

    wins = data[user]["wins"]
    losses = data[user]["losses"]
    total = wins + losses
    winrate = (wins / total * 100) if total > 0 else 0
    return text_response(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user}:\n‚úÖ –ü–æ–±–µ–¥: {wins}\n‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\nüìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%")

@app.route("/admin")
def admin():
    user = request.args.get("user")
    target = request.args.get("target")
    action = request.args.get("action")
    amount = request.args.get("amount")

    if user.lower() not in [a.lower() for a in ADMINS]:
        return text_response("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not (target and action and amount):
        return text_response("‚öô –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !admin <–Ω–∏–∫> <add|remove> <—Å—É–º–º–∞>")

    try:
        amount = int(amount)
    except ValueError:
        return text_response("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    if action == "add":
        update_balance(target, amount)
        return text_response(f"‚úÖ {user} –¥–æ–±–∞–≤–∏–ª {amount} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {target}. –ë–∞–ª–∞–Ω—Å: {get_balance(target)}")
    elif action == "remove":
        update_balance(target, -amount)
        return text_response(f"‚ö†Ô∏è {user} –∑–∞–±—Ä–∞–ª {amount} –º–æ–Ω–µ—Ç —É {target}. –ë–∞–ª–∞–Ω—Å: {get_balance(target)}")
    else:
        return text_response("‚öô –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π add –∏–ª–∏ remove.")

# ====== –°–¢–ê–†–¢ ======
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
