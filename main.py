from flask import Flask, request, Response
import json, random, os, threading, time

app = Flask(__name__)
BALANCE_FILE = "balances.json"
START_BALANCE = 1500
LOCK = threading.Lock()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def load_balances():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, "w", encoding="utf-8") as f:
            json.dump({}, f)
    with open(BALANCE_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_balances(balances):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤ —Ñ–∞–π–ª."""
    with open(BALANCE_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

def get_balance(user):
    balances = load_balances()
    return balances.get(user.lower(), START_BALANCE)

def update_balance(user, amount):
    with LOCK:
        balances = load_balances()
        user = user.lower()
        balances[user] = balances.get(user, START_BALANCE) + amount
        if balances[user] < 0:
            balances[user] = 0
        save_balances(balances)
        return balances[user]

# === –ú–∞—Ä—à—Ä—É—Ç—ã ===

@app.route("/")
def index():
    return Response("‚úÖ Twitch Casino Bot –∑–∞–ø—É—â–µ–Ω!", mimetype="text/plain; charset=utf-8")

@app.route("/balance")
def balance():
    user = request.args.get("user", "").lower()
    bal = get_balance(user)
    return Response(f"üí∞ –ë–∞–ª–∞–Ω—Å @{user}: {bal} –º–æ–Ω–µ—Ç", mimetype="text/plain; charset=utf-8")

@app.route("/roll")
def roll():
    user = request.args.get("user", "").lower()
    color = request.args.get("color", "").lower()
    bet_str = request.args.get("bet", "0")

    try:
        bet = int(bet_str)
    except ValueError:
        return Response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!", mimetype="text/plain; charset=utf-8")

    if bet <= 0:
        return Response("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!", mimetype="text/plain; charset=utf-8")

    balance_now = get_balance(user)
    if bet > balance_now:
        return Response(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å: {balance_now}", mimetype="text/plain; charset=utf-8")

    result = random.choice(["red", "black", "green"])
    colors = {"red": "üü•", "black": "‚¨õ", "green": "üü©"}

    if color not in colors:
        return Response("‚ùå –£–∫–∞–∂–∏ —Ü–≤–µ—Ç: red, black –∏–ª–∏ green", mimetype="text/plain; charset=utf-8")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    if color == result:
        multiplier = 14 if result == "green" else 2
        win = bet * (multiplier - 1)
        new_balance = update_balance(user, win)
        outcome = f"‚úÖ –ü–æ–±–µ–¥–∞! | +{win}"
    else:
        new_balance = update_balance(user, -bet)
        outcome = f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à | -{bet}"

    text = (
        f"üé∞ @{user} —Å—Ç–∞–≤–∏—Ç {bet} –Ω–∞ {colors[color]}! "
        f"–í—ã–ø–∞–ª–æ {colors[result]} ‚Äî {outcome} | –ë–∞–ª–∞–Ω—Å: {new_balance}"
    )

    return Response(text, mimetype="text/plain; charset=utf-8")

# === –ê–≤—Ç–æ–±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) ===
def autosave_loop():
    while True:
        with LOCK:
            balances = load_balances()
            save_balances(balances)
        time.sleep(300)

threading.Thread(target=autosave_loop, daemon=True).start()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
